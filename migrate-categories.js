// Script para migrar y actualizar categor√≠as de productos
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://zspwhagjbcsiazyyydaw.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpzcHdoYWdqYmNzaWF6eXl5ZGF3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0NTcyMjcsImV4cCI6MjA2NjAzMzIyN30.DJ18OWXH9-I_7LrgLeA-atlfwJdkrFabh5wN7LTkRPM';

const supabase = createClient(supabaseUrl, supabaseKey);

// Mapeo de categor√≠as para migraci√≥n
const categoryMigration = {
  'men': 'men',        // Mantener como est√°
  'women': 'women',    // Mantener como est√°
  // Nuevas categor√≠as se asignar√°n manualmente o por criterios espec√≠ficos
};

async function migrateCategories() {
  console.log('üîÑ Iniciando migraci√≥n de categor√≠as...');
  
  try {
    // 1. Verificar categor√≠as actuales
    console.log('üìä Verificando categor√≠as actuales...');
    const { data: currentCategories } = await supabase
      .from('products')
      .select('category')
      .not('category', 'is', null);
    
    const uniqueCategories = [...new Set(currentCategories.map(item => item.category))];
    console.log('üìã Categor√≠as actuales:', uniqueCategories);
    
    // 2. Contar productos por categor√≠a actual
    for (const category of uniqueCategories) {
      const { count } = await supabase
        .from('products')
        .select('*', { count: 'exact', head: true })
        .eq('category', category);
      
      console.log(`${category}: ${count} productos`);
    }
    
    // 3. Identificar productos de Zachary para nueva categor√≠a
    console.log('\nüîç Identificando productos By Zachary...');
    const { data: zacharyProducts, error: zacharyError } = await supabase
      .from('products')
      .select('id, name, brand')
      .or('brand.ilike.%zachary%,name.ilike.%zachary%');
    
    if (zacharyError) {
      console.error('‚ùå Error buscando productos Zachary:', zacharyError);
    } else {
      console.log(`üì¶ Productos Zachary encontrados: ${zacharyProducts.length}`);
      
      // Actualizar productos Zachary a nueva categor√≠a
      if (zacharyProducts.length > 0) {
        const { error: updateError } = await supabase
          .from('products')
          .update({ category: 'zachary' })
          .in('id', zacharyProducts.map(p => p.id));
        
        if (updateError) {
          console.error('‚ùå Error actualizando productos Zachary:', updateError);
        } else {
          console.log('‚úÖ Productos Zachary actualizados a categor√≠a "zachary"');
        }
      }
    }
    
    // 4. Verificar productos sin categor√≠a
    console.log('\nüîç Verificando productos sin categor√≠a...');
    const { count: uncategorizedCount } = await supabase
      .from('products')
      .select('*', { count: 'exact', head: true })
      .is('category', null);
    
    console.log(`üì¶ Productos sin categor√≠a: ${uncategorizedCount}`);
    
    // 5. Mostrar resumen final
    console.log('\nüìä Resumen final de categor√≠as:');
    const { data: finalCategories } = await supabase
      .from('products')
      .select('category')
      .not('category', 'is', null);
    
    const finalUniqueCategories = [...new Set(finalCategories.map(item => item.category))];
    
    for (const category of finalUniqueCategories) {
      const { count } = await supabase
        .from('products')
        .select('*', { count: 'exact', head: true })
        .eq('category', category);
      
      console.log(`${category}: ${count} productos`);
    }
    
    console.log('\n‚úÖ Migraci√≥n completada');
    
  } catch (error) {
    console.error('üí• Error en migraci√≥n:', error);
  }
}

// Funci√≥n para asignar categor√≠as manualmente
async function assignCategoryManually(productIds, newCategory) {
  try {
    const { error } = await supabase
      .from('products')
      .update({ category: newCategory })
      .in('id', productIds);
    
    if (error) {
      console.error('‚ùå Error asignando categor√≠a:', error);
    } else {
      console.log(`‚úÖ ${productIds.length} productos asignados a categor√≠a "${newCategory}"`);
    }
  } catch (error) {
    console.error('üí• Error:', error);
  }
}

// Ejecutar migraci√≥n
migrateCategories();

// Exportar funci√≥n para uso manual
export { assignCategoryManually };
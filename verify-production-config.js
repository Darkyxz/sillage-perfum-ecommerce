#!/usr/bin/env node

console.log('üîç VERIFICANDO CONFIGURACI√ìN DE PRODUCCI√ìN');
console.log('==========================================\n');

// Simular variables de entorno de producci√≥n
const mockProdEnv = {
  DEV: false,
  PROD: true,
  VITE_API_BASE_URL: 'https://sillageperfum.cl/api-proxy.php',
  VITE_BASE_URL: 'https://sillageperfum.cl',
  VITE_NODE_ENV: 'production'
};

// Simular import.meta.env para producci√≥n
const originalImportMeta = global.import?.meta?.env || {};

// Configuraci√≥n simulada
const isDevelopment = mockProdEnv.DEV;
const isProduction = mockProdEnv.PROD;

const API_CONFIG = {
  BASE_URL: isDevelopment 
    ? mockProdEnv.VITE_API_BASE_URL || 'http://localhost:3001/api'
    : mockProdEnv.VITE_API_BASE_URL || 'https://sillageperfum.cl/api-proxy.php',
  
  FRONTEND_URL: isDevelopment 
    ? 'http://localhost:5173'
    : 'https://sillageperfum.cl',
    
  PAYMENT_RETURN_URL: isDevelopment 
    ? 'http://localhost:5173/pago-exitoso'
    : 'https://sillageperfum.cl/pago-exitoso',
    
  PAYMENT_FAILURE_URL: isDevelopment 
    ? 'http://localhost:5173/pago-fallido' 
    : 'https://sillageperfum.cl/pago-fallido',
    
  GUEST_PAYMENT_RETURN_URL: (orderId, email) => {
    const baseUrl = isDevelopment 
      ? 'http://localhost:5173'
      : 'https://sillageperfum.cl';
    return `${baseUrl}/pago-exitoso?guest=true&order=${orderId}&email=${encodeURIComponent(email)}`;
  },
  
  GUEST_PAYMENT_FAILURE_URL: (orderId) => {
    const baseUrl = isDevelopment 
      ? 'http://localhost:5173'
      : 'https://sillageperfum.cl';
    return `${baseUrl}/pago-fallido?guest=true&order=${orderId}`;
  }
};

console.log('üìã CONFIGURACI√ìN DETECTADA:');
console.log('============================');
console.log(`‚Ä¢ Ambiente: ${isProduction ? 'PRODUCCI√ìN' : 'DESARROLLO'}`);
console.log(`‚Ä¢ API Base URL: ${API_CONFIG.BASE_URL}`);
console.log(`‚Ä¢ Frontend URL: ${API_CONFIG.FRONTEND_URL}`);
console.log(`‚Ä¢ Payment Return URL: ${API_CONFIG.PAYMENT_RETURN_URL}`);
console.log(`‚Ä¢ Payment Failure URL: ${API_CONFIG.PAYMENT_FAILURE_URL}`);

console.log('\nüß™ PROBANDO URLS DE INVITADO:');
console.log('==============================');
const testOrderId = 'BO-1234567890';
const testEmail = 'test@example.com';
console.log(`‚Ä¢ Guest Return URL: ${API_CONFIG.GUEST_PAYMENT_RETURN_URL(testOrderId, testEmail)}`);
console.log(`‚Ä¢ Guest Failure URL: ${API_CONFIG.GUEST_PAYMENT_FAILURE_URL(testOrderId)}`);

console.log('\n‚úÖ VERIFICACIONES:');
console.log('==================');

// Verificar que no hay localhost en producci√≥n
const hasLocalhost = [
  API_CONFIG.BASE_URL,
  API_CONFIG.FRONTEND_URL,
  API_CONFIG.PAYMENT_RETURN_URL,
  API_CONFIG.PAYMENT_FAILURE_URL
].some(url => url.includes('localhost'));

if (hasLocalhost && isProduction) {
  console.log('‚ùå ERROR: URLs de localhost encontradas en configuraci√≥n de producci√≥n');
} else if (isProduction) {
  console.log('‚úÖ URLs de producci√≥n correctas (sin localhost)');
} else {
  console.log('‚ÑπÔ∏è  URLs de desarrollo (localhost esperado)');
}

// Verificar formato de URLs
const urlRegex = /^https?:\/\/.+/;
const allUrls = [
  { name: 'API Base URL', url: API_CONFIG.BASE_URL },
  { name: 'Frontend URL', url: API_CONFIG.FRONTEND_URL },
  { name: 'Payment Return URL', url: API_CONFIG.PAYMENT_RETURN_URL },
  { name: 'Payment Failure URL', url: API_CONFIG.PAYMENT_FAILURE_URL }
];

console.log('\nüîó VALIDACI√ìN DE URLs:');
console.log('======================');
allUrls.forEach(({ name, url }) => {
  if (urlRegex.test(url)) {
    console.log(`‚úÖ ${name}: Formato v√°lido`);
  } else {
    console.log(`‚ùå ${name}: Formato inv√°lido - ${url}`);
  }
});

console.log('\nüìù RESUMEN:');
console.log('===========');
if (isProduction && !hasLocalhost) {
  console.log('‚úÖ Configuraci√≥n lista para producci√≥n');
  console.log('');
  console.log('üöÄ Siguiente paso:');
  console.log('‚Ä¢ Ejecuta: build-production.bat');
  console.log('‚Ä¢ Sube los archivos de dist/ a tu servidor');
  console.log('‚Ä¢ Verifica que el backend est√© funcionando');
} else if (!isProduction) {
  console.log('‚ÑπÔ∏è  Configuraci√≥n de desarrollo activa');
} else {
  console.log('‚ùå Configuraci√≥n necesita correcciones');
  console.log('‚Ä¢ Revisa las URLs que contienen localhost');
  console.log('‚Ä¢ Aseg√∫rate de usar .env.production en build');
}

console.log('\nüí° COMANDOS √öTILES:');
console.log('===================');
console.log('‚Ä¢ bun run build    (build de producci√≥n)');
console.log('‚Ä¢ bun run preview  (previsualizar build)');
console.log('‚Ä¢ bun run dev      (desarrollo)');

console.log('\nüîß ARCHIVOS IMPORTANTES:');
console.log('========================');
console.log('‚Ä¢ .env.local       (desarrollo)');
console.log('‚Ä¢ .env.production  (producci√≥n)');
console.log('‚Ä¢ src/utils/config.js (configuraci√≥n centralizada)');

console.log('\n');

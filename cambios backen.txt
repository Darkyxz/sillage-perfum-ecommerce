1. CartContext.js (No necesita cambios importantes)
javascript
import React, { createContext, useContext, useState, useEffect } from 'react';
import { toast } from '@/components/ui/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import safeStorage from '@/utils/storage';

const CartContext = createContext();

export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart debe ser usado dentro de CartProvider');
  }
  return context;
};

export const CartProvider = ({ children }) => {
  const { user } = useAuth();
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(false);

  // Cargar carrito al iniciar
  useEffect(() => {
    const loadCart = () => {
      try {
        const localCart = JSON.parse(safeStorage.getItem('cart') || '[]');
        setItems(localCart);
      } catch (error) {
        console.error('Error loading cart:', error);
        setItems([]);
      }
    };
    
    loadCart();
  }, []);

  // Guardar en storage cuando cambie el carrito
  useEffect(() => {
    if (!loading) {
      safeStorage.setItem('cart', JSON.stringify(items));
    }
  }, [items, loading]);

  const addToCart = (product, quantity = 1) => {
    try {
      setItems(prevItems => {
        const existingItem = prevItems.find(item => item.id === product.id);
        if (existingItem) {
          return prevItems.map(item =>
            item.id === product.id
              ? { ...item, quantity: item.quantity + quantity }
              : item
          );
        }
        return [...prevItems, { ...product, quantity }];
      });

      toast({
        title: "Producto agregado",
        description: `${product.name} se agregó al carrito`,
      });
    } catch (error) {
      console.error("Error adding to cart:", error);
      toast({ 
        title: 'Error', 
        description: 'No se pudo agregar al carrito', 
        variant: 'destructive' 
      });
    }
  };

  const removeFromCart = (productId) => {
    try {
      setItems(prev => prev.filter(item => item.id !== productId));
      toast({
        title: "Producto eliminado",
        description: "El producto se eliminó del carrito",
      });
    } catch (error) {
      console.error("Error removing from cart:", error);
      toast({ 
        title: 'Error', 
        description: 'No se pudo eliminar del carrito', 
        variant: 'destructive' 
      });
    }
  };

  const updateQuantity = (productId, quantity) => {
    try {
      if (quantity <= 0) {
        removeFromCart(productId);
        return;
      }

      setItems(prevItems =>
        prevItems.map(item =>
          item.id === productId ? { ...item, quantity } : item
        )
      );
    } catch (error) {
      console.error("Error updating cart quantity:", error);
      toast({ 
        title: 'Error', 
        description: 'No se pudo actualizar la cantidad', 
        variant: 'destructive' 
      });
    }
  };
  
  const clearCart = () => {
    try {
      setItems([]);
      toast({
        title: "Carrito vaciado",
        description: "Se eliminaron todos los productos del carrito",
      });
    } catch (error) {
      console.error("Error clearing cart:", error);
      toast({ 
        title: 'Error', 
        description: 'No se pudo vaciar el carrito', 
        variant: 'destructive' 
      });
    }
  };

  const getTotalItems = () => {
    return items.reduce((total, item) => total + (item.quantity || 0), 0);
  };
  
  const getTotalPrice = () => {
    return items.reduce((total, item) => {
      const price = parseFloat(item.price);
      const quantity = parseInt(item.quantity, 10);
      if (!isNaN(price) && !isNaN(quantity)) {
        return total + price * quantity;
      }
      return total;
    }, 0);
  };

  const getCartSummary = () => {
    const grouped = {};
    items.forEach(item => {
      const key = `${item.name}-${item.brand}`;
      if (!grouped[key]) {
        grouped[key] = {
          name: item.name,
          brand: item.brand,
          variants: [],
          totalQuantity: 0,
          totalPrice: 0
        };
      }
      grouped[key].variants.push({
        id: item.id,
        size: item.size,
        price: item.price,
        quantity: item.quantity,
        sku: item.sku
      });
      grouped[key].totalQuantity += item.quantity;
      grouped[key].totalPrice += item.price * item.quantity;
    });
    return Object.values(grouped);
  };

  const value = {
    items,
    loading,
    addToCart,
    removeFromCart,
    updateQuantity,
    clearCart,
    getTotalItems,
    getTotalPrice,
    getCartSummary,
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};
2. checkoutService.js (Nuevo archivo)
javascript
const API_URL = import.meta.env.VITE_API_URL;

export const checkoutService = {
  async processWebpayCheckout(userId, items, amount, returnUrl, failureUrl) {
    const response = await fetch(`${API_URL}/api/webpay/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId,
        items,
        amount,
        returnUrl,
        failureUrl
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Error al iniciar el pago');
    }

    return response.json();
  },

  async confirmWebpayPayment(token) {
    const response = await fetch(`${API_URL}/api/webpay/confirm`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ token }),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Error al confirmar el pago');
    }

    return response.json();
  }
};
3. CartPage.jsx (Componente principal del carrito)
jsx
import React, { useState } from 'react';
import { Helmet } from 'react-helmet-async';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { useToast } from "@/components/ui/use-toast";
import { Trash2, PlusCircle, MinusCircle, ShoppingBag, CreditCard, Loader2 } from 'lucide-react';
import { useCart } from '@/contexts/CartContext';
import { useAuth } from '@/contexts/AuthContext';
import { checkoutService } from '@/lib/checkoutService';
import { useNavigate } from 'react-router-dom';

const CartPage = () => {
  const { toast } = useToast();
  const { items: cartItems, updateQuantity, removeFromCart, clearCart, getCartTotal } = useCart();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [isProcessing, setIsProcessing] = useState(false);

  const subtotal = getCartTotal();
  const shipping = 5000; // Envío fijo de $5.000 CLP
  const total = subtotal + shipping;

  const handleQuantityChange = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
    } else {
      updateQuantity(productId, newQuantity);
    }
  };

  const handleCheckout = async () => {
    if (!user) {
      toast({
        title: "Inicia sesión",
        description: "Debes iniciar sesión para proceder con la compra",
        variant: "destructive",
      });
      navigate('/login');
      return;
    }

    if (cartItems.length === 0) {
      toast({
        title: "Carrito vacío",
        description: "Agrega productos al carrito antes de proceder",
        variant: "destructive",
      });
      return;
    }

    setIsProcessing(true);
    
    try {
      const result = await checkoutService.processWebpayCheckout(
        user.id,
        cartItems,
        total,
        `${window.location.origin}/pago-exitoso`,
        `${window.location.origin}/pago-fallido`
      );

      if (result.url) {
        // Redirigir a Webpay
        window.location.href = result.url;
      } else {
        throw new Error('Error al iniciar el pago con Webpay');
      }
    } catch (error) {
      console.error('Error en checkout:', error);
      toast({
        title: "Error en el checkout",
        description: error.message || "Hubo un problema procesando tu pedido",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <>
      <Helmet>
        <title>Tu Carrito de Compras - Sillage Perfum</title>
        <meta name="description" content="Revisa los artículos en tu carrito de compras en Sillage Perfum y procede al pago seguro con Webpay." />
      </Helmet>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="py-8"
      >
        <h1 className="text-4xl font-bold mb-8 text-center bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-pink-500 to-red-500">
          Tu Carrito de Compras
        </h1>

        {cartItems.length === 0 ? (
          <motion.div 
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.4 }}
            className="text-center py-12 bg-slate-800/50 rounded-xl shadow-lg"
          >
            <ShoppingBag size={64} className="mx-auto mb-6 text-purple-400" />
            <p className="text-2xl text-gray-300 mb-3">Tu carrito está vacío.</p>
            <p className="text-gray-400 mb-6">¡Añade algunas fragancias exquisitas para empezar!</p>
            <Button asChild className="bg-gradient-to-r from-pink-500 to-red-500 hover:from-pink-600 hover:to-red-600 text-white">
              <a href="/products">Explorar Perfumes</a>
            </Button>
          </motion.div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2 space-y-6">
              {cartItems.map((item, index) => (
                <motion.div
                  key={item.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.4, delay: index * 0.1 }}
                  className="flex flex-col sm:flex-row items-center bg-slate-800/70 p-4 rounded-lg shadow-md border border-slate-700"
                >
                  <img alt={item.name} className="w-24 h-24 object-cover rounded-md mb-4 sm:mb-0 sm:mr-6" src={item.image_url || "https://images.unsplash.com/photo-1670538528394-18075d01726a"} />
                  <div className="flex-grow text-center sm:text-left">
                    <h2 className="text-xl font-semibold text-pink-400">{item.name}</h2>
                    <p className="text-sm text-gray-400">{item.brand}</p>
                    <p className="text-lg font-medium text-green-400 mt-1">${item.price?.toLocaleString('es-CL')} CLP</p>
                  </div>
                  <div className="flex items-center space-x-3 my-4 sm:my-0 sm:mx-6">
                    <Button variant="ghost" size="icon" onClick={() => handleQuantityChange(item.id, item.quantity - 1)} className="text-gray-400 hover:text-white">
                      <MinusCircle size={20} />
                    </Button>
                    <span className="text-lg w-8 text-center">{item.quantity}</span>
                    <Button variant="ghost" size="icon" onClick={() => handleQuantityChange(item.id, item.quantity + 1)} className="text-gray-400 hover:text-white">
                      <PlusCircle size={20} />
                    </Button>
                  </div>
                  <Button variant="ghost" size="icon" onClick={() => removeFromCart(item.id)} className="text-red-500 hover:text-red-400">
                    <Trash2 size={20} />
                  </Button>
                </motion.div>
              ))}
            </div>

            <motion.div 
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.4, delay: 0.2 }}
              className="bg-slate-800/80 backdrop-blur-md p-6 rounded-xl shadow-xl border border-slate-700 h-fit"
            >
              <h2 className="text-2xl font-semibold mb-6 text-center text-purple-300">Resumen del Pedido</h2>
              <div className="space-y-3 mb-6 text-gray-300">
                <div className="flex justify-between">
                  <span>Subtotal:</span>
                  <span>${subtotal.toLocaleString('es-CL')} CLP</span>
                </div>
                <div className="flex justify-between">
                  <span>Envío:</span>
                  <span>${shipping.toLocaleString('es-CL')} CLP</span>
                </div>
                <hr className="border-slate-700 my-2" />
                <div className="flex justify-between text-xl font-bold text-white">
                  <span>Total:</span>
                  <span className="text-green-400">${total.toLocaleString('es-CL')} CLP</span>
                </div>
              </div>
              
              <Button 
                className="w-full bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600 text-white font-semibold py-4 text-lg rounded-lg shadow-md hover:shadow-lg transform hover:scale-105 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                onClick={handleCheckout}
                disabled={isProcessing || cartItems.length === 0}
              >
                {isProcessing ? (
                  <>
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                    Procesando...
                  </>
                ) : (
                  <>
                    <CreditCard className="mr-2 h-5 w-5" />
                    🚀 Pagar con Webpay
                  </>
                )}
              </Button>
              
              <div className="mt-4 text-center">
                <p className="text-xs text-gray-500">Serás redirigido a Webpay para completar tu pago seguro.</p>
                <div className="mt-4">
                  <img 
                    src="https://www.webpay.cl/assets/img/boton_webpaycl.svg" 
                    alt="Webpay" 
                    className="h-12 mx-auto cursor-pointer" 
                    onClick={handleCheckout}
                  />
                </div>
              </div>
            </motion.div>
          </div>
        )}
      </motion.div>
    </>
  );
};

export default CartPage;
4. PaymentSuccessPage.jsx (Página de éxito)
jsx
import { CheckCircle } from 'lucide-react';
import { useEffect } from 'react';
import { Link, useSearchParams } from 'react-router-dom';
import safeStorage from '@/utils/storage';
import { checkoutService } from '@/lib/checkoutService';
import { useToast } from '@/components/ui/use-toast';

export default function PaymentSuccessPage() {
  const [searchParams] = useSearchParams();
  const token = searchParams.get('token_ws');
  const { toast } = useToast();

  useEffect(() => {
    const confirmPayment = async () => {
      if (token) {
        try {
          await checkoutService.confirmWebpayPayment(token);
          // Limpiar el carrito después de confirmar el pago
          safeStorage.removeItem('cart');
          window.dispatchEvent(new Event('cartCleared'));
        } catch (error) {
          console.error('Error confirmando pago:', error);
          toast({
            title: "Error confirmando pago",
            description: "El pago fue exitoso pero hubo un problema registrándolo en nuestro sistema. Por favor contacta a soporte.",
            variant: "destructive"
          });
        }
      }
    };

    confirmPayment();
  }, [token, toast]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-emerald-100">
      <div className="max-w-md w-full mx-4">
        <div className="bg-white rounded-2xl shadow-xl p-8 text-center">
          <div className="mb-6">
            <CheckCircle className="w-20 h-20 text-green-500 mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              ¡Pago Exitoso!
            </h1>
            <p className="text-gray-600">
              Tu pedido ha sido procesado correctamente
            </p>
          </div>

          {token && (
            <div className="bg-gray-50 rounded-lg p-4 mb-6">
              <p className="text-sm text-gray-600 mb-1">Token de Transacción</p>
              <p className="font-mono text-sm text-gray-700 break-all">
                {token}
              </p>
            </div>
          )}

          <div className="space-y-3">
            <Link
              to="/perfil"
              className="block w-full bg-primary text-white py-3 px-6 rounded-lg font-semibold hover:bg-primary/90 transition-colors"
            >
              Ver Mis Pedidos
            </Link>
            <Link
              to="/productos"
              className="block w-full bg-gray-100 text-gray-700 py-3 px-6 rounded-lg font-semibold hover:bg-gray-200 transition-colors"
            >
              Seguir Comprando
            </Link>
            <Link
              to="/"
              className="block w-full text-gray-500 py-2 hover:text-gray-700 transition-colors"
            >
              Volver al Inicio
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}
5. PaymentFailurePage.jsx (Página de fallo)
jsx
import { XCircle, RefreshCw } from 'lucide-react';
import { Link, useSearchParams } from 'react-router-dom';

export default function PaymentFailurePage() {
  const [searchParams] = useSearchParams();
  const token = searchParams.get('token_ws');
  const orderId = searchParams.get('buy_order');

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-rose-100">
      <div className="max-w-md w-full mx-4">
        <div className="bg-white rounded-2xl shadow-xl p-8 text-center">
          <div className="mb-6">
            <XCircle className="w-20 h-20 text-red-500 mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              Pago Rechazado
            </h1>
            <p className="text-gray-600">
              No se pudo procesar tu pago. Por favor, intenta nuevamente.
            </p>
          </div>

          {orderId && (
            <div className="bg-gray-50 rounded-lg p-4 mb-6">
              <p className="text-sm text-gray-600 mb-1">Número de Pedido</p>
              <p className="font-mono text-lg font-semibold text-gray-900">
                #{orderId}
              </p>
            </div>
          )}

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
            <p className="text-sm text-yellow-800">
              <strong>Posibles causas:</strong><br />
              • Fondos insuficientes<br />
              • Datos de tarjeta incorrectos<br />
              • Límite de compra excedido<br />
              • Problema temporal del banco
            </p>
          </div>

          <div className="space-y-3">
            <Link
              to="/carrito"
              className="flex items-center justify-center w-full bg-primary text-white py-3 px-6 rounded-lg font-semibold hover:bg-primary/90 transition-colors"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Intentar Nuevamente
            </Link>
            <Link
              to="/productos"
              className="block w-full bg-gray-100 text-gray-700 py-3 px-6 rounded-lg font-semibold hover:bg-gray-200 transition-colors"
            >
              Seguir Comprando
            </Link>
            <Link
              to="/contacto"
              className="block w-full text-gray-500 py-2 hover:text-gray-700 transition-colors"
            >
              Contactar Soporte
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}
Cambios necesarios en el backend:
Configurar SDK de Transbank:

bash
npm install transbank-sdk
Crear endpoints para Webpay:

/api/webpay/create: Para crear la transacción

/api/webpay/confirm: Para confirmar el pago después del redireccionamiento

Configuración básica del backend (ejemplo en Node.js):

javascript
const { WebpayPlus } = require('transbank-sdk');

// Configuración (usar credenciales reales en producción)
WebpayPlus.configureForProduction(
  process.env.WEBPAY_COMMERCE_CODE,
  process.env.WEBPAY_API_KEY
);

// Crear transacción
router.post('/api/webpay/create', async (req, res) => {
  try {
    const { amount, returnUrl, failureUrl } = req.body;
    
    const createResponse = await WebpayPlus.Transaction.create(
      generateBuyOrder(), // Función que genera un número de orden único
      req.sessionID, // sessionId
      amount,
      returnUrl
    );
    
    res.json({
      url: createResponse.url,
      token: createResponse.token
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Confirmar transacción
router.post('/api/webpay/confirm', async (req, res) => {
  try {
    const { token } = req.body;
    
    const commitResponse = await WebpayPlus.Transaction.commit(token);
    
    // Aquí guardar los datos de la transacción en tu base de datos
    // y marcar el pedido como pagado
    
    res.json(commitResponse);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

function generateBuyOrder() {
  return 'BO-' + Date.now();
}
Variables de entorno necesarias:
text
VITE_API_URL=http://localhost:3000
WEBPAY_COMMERCE_CODE=TU_CODIGO_DE_COMERCIO
WEBPAY_API_KEY=TU_API_KEY
WEBPAY_ENVIRONMENT=TEST o PRODUCTION
Estos cambios completan la migración de MercadoPago a Transbank Webpay. Asegúrate de:

Configurar correctamente las credenciales de Transbank

Probar exhaustivamente en el ambiente de integración

Implementar los endpoints del backend según tu stack tecnológico

Configurar las URLs de retorno en el panel de Transbank

Realizar la certificación con Transbank antes de pasar a producción